def n_queens(n):
    col = set()
    posDiag = set()  # (r + c)
    negDiag = set()  # (r - c)

    res = []

    # Initialize board with "0" to represent empty cells
    board = [["0"] * n for _ in range(n)]

    def backtrack(r):
        if r == n:
            # Store a copy of the board configuration as a list of strings
            copy = [" ".join(row) for row in board]
            res.append(copy)
            return

        for c in range(n):
            if c in col or (r + c) in posDiag or (r - c) in negDiag:
                continue

            # Place the queen
            col.add(c)
            posDiag.add(r + c)
            negDiag.add(r - c)
            board[r][c] = "1"

            # Move to the next row
            backtrack(r + 1)

            # Remove the queen (backtrack)
            col.remove(c)
            posDiag.remove(r + c)
            negDiag.remove(r - c)
            board[r][c] = "0"

    # Start the backtracking with the first row
    backtrack(0)

    # Print all solutions
    for sol in res:
        for row in sol:
            print(row)
        print()  # Blank line between solutions

if __name__ == "__main__":
    n_queens(8)